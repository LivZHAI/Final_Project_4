morandi_colors <- c("#A8B5A2", "#D6C6B9", "#EDE4DC", "#D4A29C",
"#A89A8E", "#6E6658", "#8DA0A5", "#B5B8A3")
ggplot(df_counts, aes(x = variable, y = count, fill = value)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = morandi_colors) +
geom_text(aes(label = count),
position = position_stack(vjust = 0.5),
color = "black", size = 2) +
labs(
title = "Figure2. Stacked Bar Chart of Exposure Variables",
x = "Categorical Variables",
y = "Count",
fill = "Intensity"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.position = "right"
)
# filter symptom variables
df_long <- df_sorted[, 14:24] |>
mutate(across(everything(), as.factor)) |>
melt(id.vars = NULL)
# cumulative bar chart
df_counts <- df_long |>
group_by(variable, value) |>
summarise(count = n(), .groups = 'drop')
# plot stacked bar chart
morandi_colors <- c("#A8B5A2", "#D6C6B9", "#EDE4DC", "#D4A29C",
"#A89A8E", "#6E6658", "#8DA0A5", "#B5B8A3", "#C3C2B6")
ggplot(df_counts, aes(x = variable, y = count, fill = value)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = morandi_colors) +
geom_text(aes(label = count),
position = position_stack(vjust = 0.5),
color = "black", size = 2) +
labs(
title = "Figure3. Stacked Bar Chart of Symptom Variables",
x = "Categorical Variables",
y = "Count",
fill = "Intensity"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.position = "right"
)
df_sorted <- read.csv("DATA550/cancer patient data sets.csv", header = TRUE)
library(dplyr)
suppressPackageStartupMessages(library(dplyr))
# Extract the numeric part of the Patient.Id
#data$Patient.Number <- as.numeric(gsub("P", "", data$Patient.Id))
# Sort the data frame by the numeric part
#df_sorted <- data[order(data$Patient.Number), ]
# Remove the temporary Patient.Number column and reorder index column
df_sorted$Patient.Number <- NULL
df_sorted$index <- NULL
df_sorted$Level <- NULL
rownames(df_sorted) <- NULL
# View the sorted data frame
head(df_sorted,10)
library(dplyr)
suppressPackageStartupMessages(library(dplyr))
# Extract the numeric part of the Patient.Id
#data$Patient.Number <- as.numeric(gsub("P", "", data$Patient.Id))
# Sort the data frame by the numeric part
#df_sorted <- data[order(data$Patient.Number), ]
# Remove the temporary Patient.Number column and reorder index column
#df_sorted$Patient.Number <- NULL
df_sorted$index <- NULL
df_sorted$Level <- NULL
rownames(df_sorted) <- NULL
library(dplyr)
suppressPackageStartupMessages(library(dplyr))
# Extract the numeric part of the Patient.Id
#data$Patient.Number <- as.numeric(gsub("P", "", data$Patient.Id))
# Sort the data frame by the numeric part
#df_sorted <- data[order(data$Patient.Number), ]
# Remove the temporary Patient.Number column and reorder index column
#df_sorted$Patient.Number <- NULL
df_sorted$index <- NULL
df_sorted$Level <- NULL
rownames(df_sorted) <- NULL
df_sorted <- read.csv("DATA550/cancer patient data sets.csv", header = TRUE)
library(dplyr)
suppressPackageStartupMessages(library(dplyr))
# Extract the numeric part of the Patient.Id
#data$Patient.Number <- as.numeric(gsub("P", "", data$Patient.Id))
# Sort the data frame by the numeric part
#df_sorted <- data[order(data$Patient.Number), ]
# Remove the temporary Patient.Number column and reorder index column
#df_sorted$Patient.Number <- NULL
df_sorted$index <- NULL
df_sorted$Level <- NULL
rownames(df_sorted) <- NULL
df_sorted <- read.csv("DATA550/cancer patient data sets.csv", header = TRUE)
library(dplyr)
suppressPackageStartupMessages(library(dplyr))
# Extract the numeric part of the Patient.Id
#data$Patient.Number <- as.numeric(gsub("P", "", data$Patient.Id))
# Sort the data frame by the numeric part
#df_sorted <- data[order(data$Patient.Number), ]
# Remove the temporary Patient.Number column and reorder index column
#df_sorted$Patient.Number <- NULL
df_sorted$index <- NULL
df_sorted$Level <- NULL
rownames(df_sorted) <- NULL
# View the sorted data frame
head(df_sorted,10)
data <- read.csv("DATA550/cancer patient data sets.csv", header = TRUE)
data$Patient.Id <- as.character(data$Patient.Id)
View(data)
# Sort the data frame by the numeric part
df_sorted <- data %>% arrange(Patient.Number)
library(dplyr)
# 读取 CSV 文件（替换 'your_data.csv' 为你的文件路径）
df <- read.csv("your_data.csv", stringsAsFactors = FALSE)
df <- read.csv("DATA550/cancer patient data sets.csv", header = TRUE)
# 确保 'Patient.Id' 列存在
if (!"Patient.Id" %in% colnames(df)) {
stop("Error: 列 'Patient.Id' 不存在，请检查数据。")
}
# 去掉 "P" 并转换为数值
df <- df %>% mutate(Patient.Id = as.numeric(gsub("P", "", Patient.Id)))
# 检查转换是否成功
if (any(is.na(df$Patient.Id))) {
stop("Error: 'Patient.Id' 转换失败，请检查数据格式。")
}
# 按数值排序
df <- df %>% arrange(Patient.Id)
# 覆盖原 CSV 文件（不写入行号）
write.csv(df, "cancer patient data sets.csv", row.names = FALSE)
# 确保数据保存成功
message("CSV 文件已成功更新！")
# 读取 CSV 文件（替换 'your_data.csv' 为你的文件路径）
df <- read.csv("cancer patient data sets.csv", stringsAsFactors = FALSE)
# 确保 'Patient.Id' 列存在
if (!"Patient.Id" %in% colnames(df)) {
stop("Error: 列 'Patient.Id' 不存在，请检查数据。")
}
stop("Error: 列 'Patient.Id' 不存在，请检查数据。")
if (!"Patient.Id" %in% colnames(df)) {
stop("Error: 列 'Patient.Id' 不存在，请检查数据。")
}
if (any(is.na(df$Patient.Id))) {
stop("Error: 'Patient.Id' 转换失败，请检查数据格式。")
}
df <- df %>% mutate(Patient.Id = as.numeric(gsub("P", "", Patient.Id)))
# 检查转换是否成功
if (any(is.na(df$Patient.Id))) {
stop("Error: 'Patient.Id' 转换失败，请检查数据格式。")
}
# 按数值排序
df <- df %>% arrange(Patient.Id)
# 覆盖原 CSV 文件（不写入行号）
write.csv(df, "cancer patient data sets.csv", row.names = FALSE)
# 确保数据保存成功
message("CSV 文件已成功更新！")
df <- read.csv("DATA550/cancer patient data sets.csv", header = TRUE)
View(df)
View(df)
df <- read.csv("DATA550/cancer patient data sets.csv", header = TRUE)
View(df)
df <- read.csv("DATA550/cancer patient data sets.csv", header = TRUE)
# View the sorted data frame
head(df_sorted,10)
df_sorted <- read.csv("DATA550/cancer patient data sets.csv", header = TRUE)
# View the sorted data frame
head(df_sorted,10)
library(knitr)
library(kableExtra)
# kable
summary_data <- as.data.frame(t(apply(df_sorted[, 3:24], 2, quantile, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)))
View(df_sorted)
df_sorted <- read.csv("DATA550/cancer patient data sets.csv", header = TRUE)
# View the sorted data frame
head(df_sorted,10)
library(knitr)
library(kableExtra)
# kable
summary_data <- as.data.frame(t(apply(df_sorted[, 3:24], 2, quantile, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)))
colnames(summary_data) <- c("Min", "First Quantile", "Median", "Third Quantile", "Max")
kable(summary_data, caption = "Table1. Five-Statistics Summary") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
column_spec(1, width = "7%") %>%
column_spec(2:6, width = "7%")
#library(dplyr)
library(labelled)
library(gtsummary)
# Table2
var_label(df_sorted)[c(2,3,12)] <- list(
Gender = 'Gender',
Age = "Age",
Smoking = "Smoking"
)
df_sorted$Gender <- as.factor(df_sorted$Gender)
df_sorted[c(2,3,12)] %>%
select('Age', 'Gender', 'Smoking')%>%
tbl_summary(
by = Gender,
missing = "no"
) %>%
modify_spanning_header(c("stat_1", "stat_2") ~ "**Table 2. Proportion of People of Multiple Smoking Levels by Gender**") %>%
add_overall()
#add_p()
# Table3
var_label(df_sorted)[c(2,3,18)] <- list(
Gender = 'Gender',
Age = "Age",
Shortness.of.Breath= "Shortness of Breath"
)
df_sorted[c(2,3,18)] %>%
select(all_of(c("Age", "Gender", "Shortness.of.Breath")))%>%
tbl_summary(
by = Gender,
missing = "no"
) %>%
modify_spanning_header(c("stat_1", "stat_2") ~ "**Table 3. Proportion of People of Multiple Shortness of Breath Levels by Gender**") %>%
add_overall()
#add_p()
library(ggplot2)
library(reshape2)
# Compute the correlation matrix while temporarily excluding Patient.Id
cor_matrix <- cor(df_sorted[, 3:24])
melted_cor_matrix <- melt(cor_matrix)
colnames(melted_cor_matrix) <- c("Var1", "Var2", "Correlation")
breaks_vec <- c(-1.0, -0.6, -0.2, 0, 0.2, 0.6, 1.0)
labels_vec <- c("-1 ~ -0.6", "-0.6 ~ -0.2", "-0.2 ~ 0", "0 ~ 0.2", "0.2 ~ 0.6", "0.6 ~ 1")
melted_cor_matrix$Correlation_Level <- factor(cut(melted_cor_matrix$Correlation,
breaks = breaks_vec,
labels = labels_vec,
include.lowest = TRUE,
right = FALSE),
levels = labels_vec)
melted_cor_matrix$Var1 <- factor(melted_cor_matrix$Var1, levels = rownames(cor_matrix))
melted_cor_matrix$Var2 <- factor(melted_cor_matrix$Var2, levels = rownames(cor_matrix))
blue_green_colors <- c("#8d6a9f",  "#469597", "#b7e4c7", "#d8f3dc", "#52b69a", "#004c6d")
# Plot Heatmap
ggplot(data = melted_cor_matrix, aes(Var1, Var2, fill = Correlation_Level)) +
geom_tile(color = "white", linewidth = 0.1) +
scale_fill_manual(values = setNames(blue_green_colors,labels_vec),
name = "Correlation Level",
breaks = labels_vec,
labels = labels_vec,
drop = FALSE) +
geom_text(aes(label = round(Correlation, 2)), size = 2, color = "black") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
panel.grid = element_blank()) +
labs(title = "Figure1. Correlation Heatmap",
x = "", y = "")
library(ggplot2)
library(reshape2)
# Compute the correlation matrix while temporarily excluding Patient.Id
cor_matrix <- cor(df_sorted[, 3:24])
melted_cor_matrix <- melt(cor_matrix)
colnames(melted_cor_matrix) <- c("Var1", "Var2", "Correlation")
breaks_vec <- c(-1.0, -0.6, -0.2, 0, 0.2, 0.6, 0.8, 1.0)
labels_vec <- c("-1 ~ -0.6", "-0.6 ~ -0.2", "-0.2 ~ 0", "0 ~ 0.2", "0.2 ~ 0.6","0.6 ~ 0.8", "0.8 ~ 1")
melted_cor_matrix$Correlation_Level <- factor(cut(melted_cor_matrix$Correlation,
breaks = breaks_vec,
labels = labels_vec,
include.lowest = TRUE,
right = FALSE),
levels = labels_vec)
melted_cor_matrix$Var1 <- factor(melted_cor_matrix$Var1, levels = rownames(cor_matrix))
melted_cor_matrix$Var2 <- factor(melted_cor_matrix$Var2, levels = rownames(cor_matrix))
blue_green_colors <- c("#8d6a9f", "#469597", "#b7e4c7", "#d8f3dc", "#52b69a", "#2d6a62","#004c6d")
# Plot Heatmap
ggplot(data = melted_cor_matrix, aes(Var1, Var2, fill = Correlation_Level)) +
geom_tile(color = "white", linewidth = 0.1) +
scale_fill_manual(values = setNames(blue_green_colors,labels_vec),
name = "Correlation Level",
breaks = labels_vec,
labels = labels_vec,
drop = FALSE) +
geom_text(aes(label = round(Correlation, 2)), size = 2, color = "black") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
panel.grid = element_blank()) +
labs(title = "Figure1. Correlation Heatmap",
x = "", y = "")
#library(ggplot2)
#library(reshape2)
#library(dplyr)
# Figure2
# filter exposure variables
df_long <- df_sorted[, 4:13] |>
mutate(across(everything(), as.factor)) |>
melt(id.vars = NULL)
# cumulative bar chart
df_counts <- df_long |>
group_by(variable, value) |>
summarise(count = n(), .groups = 'drop')
# plot stacked bar chart
morandi_colors <- c("#A8B5A2", "#D6C6B9", "#EDE4DC", "#D4A29C",
"#A89A8E", "#6E6658", "#8DA0A5", "#B5B8A3")
ggplot(df_counts, aes(x = variable, y = count, fill = value)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = morandi_colors) +
geom_text(aes(label = count),
position = position_stack(vjust = 0.5),
color = "black", size = 2) +
labs(
title = "Figure2. Stacked Bar Chart of Exposure Variables",
x = "Categorical Variables",
y = "Count",
fill = "Intensity"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.position = "right"
)
# filter symptom variables
df_long <- df_sorted[, 14:24] |>
mutate(across(everything(), as.factor)) |>
melt(id.vars = NULL)
# cumulative bar chart
df_counts <- df_long |>
group_by(variable, value) |>
summarise(count = n(), .groups = 'drop')
# plot stacked bar chart
morandi_colors <- c("#A8B5A2", "#D6C6B9", "#EDE4DC", "#D4A29C",
"#A89A8E", "#6E6658", "#8DA0A5", "#B5B8A3", "#C3C2B6")
ggplot(df_counts, aes(x = variable, y = count, fill = value)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = morandi_colors) +
geom_text(aes(label = count),
position = position_stack(vjust = 0.5),
color = "black", size = 2) +
labs(
title = "Figure3. Stacked Bar Chart of Symptom Variables",
x = "Categorical Variables",
y = "Count",
fill = "Intensity"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.position = "right"
)
library(knitr)
library(kableExtra)
# kable
summary_data <- as.data.frame(t(apply(df_sorted[, 3:24], 2, quantile, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)))
colnames(summary_data) <- c("Min", "First Quantile", "Median", "Third Quantile", "Max")
kable(summary_data, caption = "Table1. Five-Statistics Summary") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
column_spec(1, width = "7%") %>%
column_spec(2:6, width = "7%")
library(dplyr)
library(knitr)
library(kableExtra)
# kable
summary_data <- as.data.frame(t(apply(df_sorted[, 3:24], 2, quantile, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)))
colnames(summary_data) <- c("Min", "First Quantile", "Median", "Third Quantile", "Max")
kable(summary_data, caption = "Table1. Five-Statistics Summary") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
column_spec(1, width = "7%") %>%
column_spec(2:6, width = "7%")
library(ggplot2)
library(reshape2)
# Compute the correlation matrix while temporarily excluding Patient.Id
cor_matrix <- cor(df_sorted[, 3:24])
melted_cor_matrix <- melt(cor_matrix)
colnames(melted_cor_matrix) <- c("Var1", "Var2", "Correlation")
breaks_vec <- c(-1.0, -0.6, -0.4, -0.2, 0, 0.2, 0.6, 0.8, 1.0)
labels_vec <- c("-1 ~ -0.6", "-0.6 ~ -0.4","-0.4 ~ -0.2", "-0.2 ~ 0", "0 ~ 0.2", "0.2 ~ 0.6","0.6 ~ 0.8", "0.8 ~ 1")
melted_cor_matrix$Correlation_Level <- factor(cut(melted_cor_matrix$Correlation,
breaks = breaks_vec,
labels = labels_vec,
include.lowest = TRUE,
right = FALSE),
levels = labels_vec)
melted_cor_matrix$Var1 <- factor(melted_cor_matrix$Var1, levels = rownames(cor_matrix))
melted_cor_matrix$Var2 <- factor(melted_cor_matrix$Var2, levels = rownames(cor_matrix))
blue_green_colors <- c("#8d6a9f", "#6f7785", "#469597", "#b7e4c7", "#d8f3dc", "#52b69a", "#2d6a62","#004c6d")
# Plot Heatmap
ggplot(data = melted_cor_matrix, aes(Var1, Var2, fill = Correlation_Level)) +
geom_tile(color = "white", linewidth = 0.1) +
scale_fill_manual(values = setNames(blue_green_colors,labels_vec),
name = "Correlation Level",
breaks = labels_vec,
labels = labels_vec,
drop = FALSE) +
geom_text(aes(label = round(Correlation, 2)), size = 2, color = "black") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
panel.grid = element_blank()) +
labs(title = "Figure1. Correlation Heatmap",
x = "", y = "")
library(ggplot2)
library(reshape2)
# Compute the correlation matrix while temporarily excluding Patient.Id
cor_matrix <- cor(df_sorted[, 3:24])
melted_cor_matrix <- melt(cor_matrix)
colnames(melted_cor_matrix) <- c("Var1", "Var2", "Correlation")
breaks_vec <- c(-1.0, -0.6, -0.2, 0, 0.2,0.4, 0.6, 0.8, 1.0)
labels_vec <- c("-1 ~ -0.6","-0.6 ~ -0.2", "-0.2 ~ 0", "0 ~ 0.2", "0.2 ~ 0.4","0.4 ~ 0.6", "0.6 ~ 0.8", "0.8 ~ 1")
melted_cor_matrix$Correlation_Level <- factor(cut(melted_cor_matrix$Correlation,
breaks = breaks_vec,
labels = labels_vec,
include.lowest = TRUE,
right = FALSE),
levels = labels_vec)
melted_cor_matrix$Var1 <- factor(melted_cor_matrix$Var1, levels = rownames(cor_matrix))
melted_cor_matrix$Var2 <- factor(melted_cor_matrix$Var2, levels = rownames(cor_matrix))
blue_green_colors <- c("#8d6a9f", "#6f7785", "#469597", "#b7e4c7", "#d8f3dc", "#52b69a", "#2d6a62","#004c6d")
# Plot Heatmap
ggplot(data = melted_cor_matrix, aes(Var1, Var2, fill = Correlation_Level)) +
geom_tile(color = "white", linewidth = 0.1) +
scale_fill_manual(values = setNames(blue_green_colors,labels_vec),
name = "Correlation Level",
breaks = labels_vec,
labels = labels_vec,
drop = FALSE) +
geom_text(aes(label = round(Correlation, 2)), size = 2, color = "black") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
panel.grid = element_blank()) +
labs(title = "Figure1. Correlation Heatmap",
x = "", y = "")
library(ggplot2)
library(reshape2)
# Compute the correlation matrix while temporarily excluding Patient.Id
cor_matrix <- cor(df_sorted[, 3:24])
melted_cor_matrix <- melt(cor_matrix)
colnames(melted_cor_matrix) <- c("Var1", "Var2", "Correlation")
breaks_vec <- c(-1.0, -0.4, -0.2, 0, 0.2,0.4, 0.6, 0.8, 1.0)
labels_vec <- c("-1 ~ -0.4","-0.4 ~ -0.2", "-0.2 ~ 0", "0 ~ 0.2", "0.2 ~ 0.4","0.4 ~ 0.6", "0.6 ~ 0.8", "0.8 ~ 1")
melted_cor_matrix$Correlation_Level <- factor(cut(melted_cor_matrix$Correlation,
breaks = breaks_vec,
labels = labels_vec,
include.lowest = TRUE,
right = FALSE),
levels = labels_vec)
melted_cor_matrix$Var1 <- factor(melted_cor_matrix$Var1, levels = rownames(cor_matrix))
melted_cor_matrix$Var2 <- factor(melted_cor_matrix$Var2, levels = rownames(cor_matrix))
blue_green_colors <- c("#8d6a9f", "#6f7785", "#469597", "#b7e4c7", "#d8f3dc", "#52b69a", "#2d6a62","#004c6d")
# Plot Heatmap
ggplot(data = melted_cor_matrix, aes(Var1, Var2, fill = Correlation_Level)) +
geom_tile(color = "white", linewidth = 0.1) +
scale_fill_manual(values = setNames(blue_green_colors,labels_vec),
name = "Correlation Level",
breaks = labels_vec,
labels = labels_vec,
drop = FALSE) +
geom_text(aes(label = round(Correlation, 2)), size = 2, color = "black") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
panel.grid = element_blank()) +
labs(title = "Figure1. Correlation Heatmap",
x = "", y = "")
library(openxlsx)
install.packages('openxlsx')
library(openxlsx)
file_path <- here::here('Data for Seah2020assessing.xlsx')
print(file_path)
file_path <- here::i_am('Data for Seah2020assessing.xlsx')
file_path <- here::i_am('Desktop','Data for Seah2020assessing.xlsx')
file_path <- here::here('Desktop','Data for Seah2020assessing.xlsx')
print(file_path)
data <- read.xlsx(file_path)
install.packages('openxlsx')
library(openxlsx)
file_path <- here::here('Desktop','Data for Seah2020assessing.xlsx')
print(file_path)
data <- read.xlsx(file_path)
install.packages("openxlsx")
View(data)
library(tidyverse)
library(dplyr)
group_values < 5:17
group_values <- 5:17
day_labels <- past('Day', 1:20)
day_labels <- paste('Day', 1:20)
new_data <- expand.grid(Col1 = group_values,Col2 = day_labels)
View(new_data)
new_data <- tibble(
Col1 = rep(group_values,each = 20),
Col2 = rep(day_labels, times =13)
)
updated_data <- bind_rows(data,new_data)
View(updated_data)
colnames()
colnames(data)
colnames(new_data) <- colnames(data)
d
updated_data <- bind_rows(data,new_data)
write.xlsx(updated_data,file = 'seah2020assessing')
write.xlsx(updated_data,file = file_path)
install.packages('pacman')
install.packages('dplyr')
library(dplyr)
packages("renv")
renv::init()
getwd()
setwd("/Users/livz/Desktop/DATA550/final_project_4_git")
getwd()
renv::init()
renv::status()
renv::snapshot()
